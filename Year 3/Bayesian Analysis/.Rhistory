#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 30000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#plot autocorrelations for parameters to verify convergence
autocorr.plot(sample[,1:7], 100)
#write model to radon.bug
cat('
model{
for(j in 1:M){
theta[j] ~ dnorm(uu[j], sigma2^(-2))
}
for(i in 1:n){
x[i] ~ dnorm( alpha*(theta[county.index[i]]) + beta*B[i], sigma^(-2))
}
alpha ~ dnorm(0,0.001)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0,100)
sigma2 ~ dunif(0,100)
}', file='radon.bug')
#mu0 ~ dnorm(0,0.001)
#specify determined parts
radon_data<-list(n=nrow(radon), M=max(radon$county.index), x=radon$log.radon, county.index = radon$county.index,
B=radon$floor, uu = unique(radon$uu))
#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 30000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#plot autocorrelations for parameters to verify convergence
autocorr.plot(sample[,1:7], 100)
radon <- read.table('C:/Users/Dom/Documents/GitHub/Statistics/Year 3/Bayesian Analysis/DataSheet6/radon.txt', sep='')
set.seed(333)
library(MASS)
library(rjags)
library(coda)
load.module('glm')
#partition into training and test data
#ntrain <- 700
#radon_train <- (radon[1:ntrain,])
#radon_test <- (radon[ntrain:nrow(radon),])
#write model to radon.bug
cat('
model{
for(j in 1:M){
theta[j] ~ dnorm(uu[j], sigma2^(-2))
}
for(i in 1:n){
x[i] ~ dnorm( alpha*(theta[county.index[i]]) + beta*B[i], sigma^(-2))
}
alpha ~ dnorm(0,0.001)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0,100)
sigma2 ~ dunif(0,100)
}', file='radon.bug')
#mu0 ~ dnorm(0,0.001)
#specify determined parts
radon_data<-list(n=nrow(radon), M=max(radon$county.index), x=radon$log.radon, county.index = radon$county.index,
B=radon$floor, uu = unique(radon$uu))
#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 90000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#plot autocorrelations for parameters to verify convergence
autocorr.plot(sample[,1:7], 100)
traceplot(sample[,1:7])
summary(sample)$statistics
radon <- read.table('C:/Users/Dom/Documents/GitHub/Statistics/Year 3/Bayesian Analysis/DataSheet6/radon.txt', sep='')
set.seed(333)
library(MASS)
library(rjags)
library(coda)
load.module('glm')
#partition into training and test data
#ntrain <- 700
#radon_train <- (radon[1:ntrain,])
#radon_test <- (radon[ntrain:nrow(radon),])
#write model to radon.bug
cat('
model{
for(j in 1:M){
theta[j] ~ dnorm(uu[j], sigma2^(-2))
}
for(i in 1:n){
x[i] ~ dnorm( alpha*(theta[county.index[i]]) + beta*B[i], sigma^(-2))
}
alpha ~ dnorm(0,0.0001)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0,100)
sigma2 ~ dunif(0,10000)
}', file='radon.bug')
#mu0 ~ dnorm(0,0.001)
#specify determined parts
radon_data<-list(n=nrow(radon), M=max(radon$county.index), x=radon$log.radon, county.index = radon$county.index,
B=radon$floor, uu = unique(radon$uu))
#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 10000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 10000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#plot autocorrelations for parameters to verify convergence
autocorr.plot(sample[,1:7], 100)
radon <- read.table('C:/Users/Dom/Documents/GitHub/Statistics/Year 3/Bayesian Analysis/DataSheet6/radon.txt', sep='')
set.seed(333)
library(MASS)
library(rjags)
library(coda)
load.module('glm')
#partition into training and test data
#ntrain <- 700
#radon_train <- (radon[1:ntrain,])
#radon_test <- (radon[ntrain:nrow(radon),])
#write model to radon.bug
cat('
model{
for(j in 1:M){
theta[j] ~ dnorm(alpha*uu[j], sigma2^(-2))
}
for(i in 1:n){
x[i] ~ dnorm( (theta[county.index[i]]) + beta*B[i], sigma^(-2))
}
alpha ~ dnorm(0,0.0001)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0,100)
sigma2 ~ dunif(0,10000)
}', file='radon.bug')
#mu0 ~ dnorm(0,0.001)
#specify determined parts
radon_data<-list(n=nrow(radon), M=max(radon$county.index), x=radon$log.radon, county.index = radon$county.index,
B=radon$floor, uu = unique(radon$uu))
#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
radon <- read.table('C:/Users/Dom/Documents/GitHub/Statistics/Year 3/Bayesian Analysis/DataSheet6/radon.txt', sep='')
set.seed(333)
library(MASS)
library(rjags)
library(coda)
load.module('glm')
#write model to radon.bug
cat('
model{
for(j in 1:M){
theta[j] ~ dnorm(alpha*uu[j], sigma2^(-2))
}
for(i in 1:n){
x[i] ~ dnorm( (theta[county.index[i]]) + beta*B[i], sigma^(-2))
}
alpha ~ dnorm(0,0.0001)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0,100)
sigma2 ~ dunif(0,10000)
}', file='radon.bug')
#mu0 ~ dnorm(0,0.001)
#specify determined parts
radon_data<-list(n=nrow(radon), M=max(radon$county.index), x=radon$log.radon, county.index = radon$county.index,
B=radon$floor, uu = unique(radon$uu))
#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 10000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#plot autocorrelations for parameters to verify convergence
autocorr.plot(sample[,1:7], 100)
traceplot(sample[,1:7])
summary(sample)$statistics
#select houses with basements
radon_bm <- radon[radon$floor==1,]
#find average and counts by county
county_means <- rep(0, 84)
county_count <- rep(0, 84)
for(i in 1:84){
county_means[i] <- mean(radon_bm$log.radon[radon_bm$county.index == i])
county_count[i] <- nrow(radon_bm[radon_bm$county.index == i,])
}
#plot means against counts
plot(county_count,county_means)
#find overall mean and overlay as line
state_mean <- mean(radon_bm$log.radon)
abline(a=state_mean, b=0)
head(pars)
#select estimates for parameters
pars <- summary(sample)$statistics[,1]
head(pars)
#select estimates for parameters
pars <- summary(sample)$statistics[,1]
#
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  state_mean + pars[1]*theta[radon$county.index[i+4]] + pars[2]
}
#select estimates for parameters
pars <- summary(sample)$statistics[,1]
#
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  state_mean + pars[1]*pars[radon$county.index[i+4]] + pars[2]
}
#plot predictions against counts by county
plot(preds, county_count)
#plot predictions against counts by county
plot(county_count, preds)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  state_mean + pars[1]*pars[radon$county.index[i]+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
pars
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-   pars[1]*pars[radon$county.index[i]+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  state_mean + pars[1]*pars[unique(radon$uu)[i]+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  state_mean + pars[1]*pars[i+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  pars[1]*pars[i+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
plot(county_count, preds)
abline(a=state_mean, b=0)
plot(county_means, preds)
mean((county_means-preds)^2)
View(radon)
head(pars)
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
u_cook <- -0.504995982525783
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
u_cook <- -0.504995982525783
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
#Predict the log-radon level of a house with a basement in the county of Cook
pars[1]*u_cook + pars[2]
#plot estimates against each other
plot(county_means, preds)
#find mean square error of both estimates
mean((county_means-preds)^2)
#plot predictions against counts by county
plot(county_count, preds)
abline(a=state_mean, b=0)
(county_means*county_count)/nrow(radon_data)
(preds%*%county_count)/nrow(radon_data)
(county_means*t(county_count))/nrow(radon_data)
county_means*county_count
(sum(county_means*county_count))/nrow(radon_data)
(sum(county_means*county_count))/nrow(radon_bm)
(sum(preds*county_count))/nrow(radon_bm)
#select houses with basements
radon_bm <- radon[radon$floor==1,]
#find average and counts by county
county_means <- rep(0, 84)
county_count <- rep(0, 84)
for(i in 1:84){
county_means[i] <- mean(radon_bm$log.radon[radon_bm$county.index == i])
county_count[i] <- nrow(radon_bm[radon_bm$county.index == i,])
}
#plot means against counts
plot(county_count,county_means)
#find overall mean and overlay as line
state_mean <- mean(radon_bm$log.radon)
abline(a=state_mean, b=0)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  pars[1]*pars[i+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
abline(a=state_mean, b=0)
#plot estimates against each other
plot(county_means, preds)
#find mean square error of both estimates
mean((county_means-preds)^2)
##0.144199
#find average log radon for houses with a basement in state
state_mean
##1.328477
##find average predicted log radon for houses with a basement in state
(sum(preds*county_count))/nrow(radon_bm)
##1.257926
u_cook <- -0.504995982525783
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
#Predict the log-radon level of a house with a basement in the county of Cook
pars[1]*u_cook + pars[2]
summary(sample)$statistics[,1]
source('~/GitHub/Statistics/Year 3/Bayesian Analysis/DomOwensR.R')
setwd("~/GitHub/Statistics/Year 3")
setwd("~/GitHub/Statistics/Year 3/Bayesian Analysis")
radon <- read.table('DataSheet6/radon.txt', sep='')
set.seed(333)
library(MASS)
library(rjags)
library(coda)
load.module('glm')
radon <- read.table('DataSheet6/radon.txt', sep='')
source("DomOwensR.R")
pars[1]*u_cook
pars[1]*u_cook + pars[2]
radon <- read.table('DataSheet6/radon.txt', sep='')
set.seed(333)
library(MASS)
library(rjags)
library(coda)
load.module('glm')
#write model to radon.bug
cat('
model{
for(j in 1:M){
theta[j] ~ dnorm(alpha*uu[j], sigma2^(-2))
}
for(i in 1:n){
x[i] ~ dnorm( (theta[county.index[i]]) + beta*B[i], sigma^(-2))
}
alpha ~ dnorm(0,0.0001)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0,100)
sigma2 ~ dunif(0,10000)
}', file='radon.bug')
#specify determined parts
radon_data<-list(n=nrow(radon), M=max(radon$county.index), x=radon$log.radon, county.index = radon$county.index,
B=radon$floor, uu = unique(radon$uu))
#specify prior points
radon_inits <- list(alpha=0,beta=0,sigma=1,sigma2=1)
#construct model in jags
radon_mu<-jags.model('radon.bug',inits = radon_inits,data=radon_data)
#verify we are sampling correct quantities, and using correct samplers
list.samplers(radon_mu)
#set burn-in length
Burn <- 2000
#set trajectory length
Tr <- 10000
#update chain by burn-in length
update(radon_mu, n.iter = Burn)
#sample from distribution with correct quantities
sample<-coda.samples(radon_mu, variable.names = c("alpha","theta","beta","sigma","sigma2"), n.iter=Tr)
#plot autocorrelations for parameters to verify convergence
autocorr.plot(sample[,1:7], 100)
#These have rapidly-declining autocorrelation, indicating the chain has converged for all parameters
traceplot(sample[,1:7])
#These appear as white noise, centred on the parameter estimate, indicating the chain has converged to a stationary distribution
summary(sample)$statistics
#All the standard deviations are small, supporting convergence
#select houses with basements
radon_bm <- radon[radon$floor==1,]
#find average and counts by county
county_means <- rep(0, 84)
county_count <- rep(0, 84)
for(i in 1:84){
county_means[i] <- mean(radon_bm$log.radon[radon_bm$county.index == i])
county_count[i] <- nrow(radon_bm[radon_bm$county.index == i,])
}
#plot means against counts
plot(county_count,county_means)
#find overall mean and overlay as line
state_mean <- mean(radon_bm$log.radon)
abline(a=state_mean, b=0)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  pars[1]*pars[i+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
abline(a=state_mean, b=0)
#plot estimates against each other
plot(county_means, preds)
#find mean square error of both estimates
mean((county_means-preds)^2)
u_cook <- -0.504995982525783
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
#Predict the log-radon level of a house with a basement in the county of Cook
pars[1]*u_cook + pars[2]
#select houses with basements
radon_bm <- radon[radon$floor==1,]
#find average and counts by county
county_means <- rep(0, 84)
county_count <- rep(0, 84)
for(i in 1:84){
county_means[i] <- mean(radon_bm$log.radon[radon_bm$county.index == i])
county_count[i] <- nrow(radon_bm[radon_bm$county.index == i,])
}
#plot means against counts
plot(county_count,county_means)
#find overall mean and overlay as line
state_mean <- mean(radon_bm$log.radon)
abline(a=state_mean, b=0)
#select estimates for parameters as a new vector
pars <- summary(sample)$statistics[,1]
#predict log radon for each county, assuming house has a basement, using model equation
preds <- rep(0, 84)
for(i in 1:84){
preds[i] <-  pars[1]*pars[i+4] + pars[2]
}
#plot predictions against counts by county
plot(county_count, preds)
abline(a=state_mean, b=0)
#plot estimates against each other
plot(county_means, preds)
#find mean square error of both estimates
mean((county_means-preds)^2)
##0.144199
#find average log radon for houses with a basement in state
state_mean
##1.328477
##find average predicted log radon for houses with a basement in state
(sum(preds*county_count))/nrow(radon_bm)
##1.257926
u_cook <- -0.504995982525783
#Predict the log-radon level of a house with no basement in the county of Cook
pars[1]*u_cook
#Predict the log-radon level of a house with a basement in the county of Cook
pars[1]*u_cook + pars[2]
unlink('BM Assessed HW Qs 3 and 4_cache', recursive = TRUE)
?knitr
knit_with_parameters('~/GitHub/Statistics/Year 3/Bayesian Analysis/BM Assessed HW Qs 3 and 4.Rmd')
